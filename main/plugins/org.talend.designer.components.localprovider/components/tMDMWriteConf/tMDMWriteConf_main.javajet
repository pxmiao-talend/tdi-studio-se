<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType    
    java.util.List
    java.util.Map
  "
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
LogUtil logUtil = new LogUtil(node);
String cid = node.getUniqueName();
String destination = ElementParameterParser.getValue(node, "__DESTINATION__");

boolean isStaging = "STAGING".equalsIgnoreCase(ElementParameterParser.getValue(node, "__CONTAINER_TYPE__"));

boolean withReport = ("true").equals(ElementParameterParser.getValue(node,"__WITHREPORT__"));
String xmlField = ElementParameterParser.getValue(node,"__XMLFIELD__");
String needCheck = ElementParameterParser.getValue(node,"__ISINVOKE__");
boolean isMassInsert =("true").equals(ElementParameterParser.getValue(node,"__EXTENDINSERT__"));
String numMassInsert = ElementParameterParser.getValue(node,"__COMMIT_LEVEL__");
String sourceName = ElementParameterParser.getValue(node,"__SOURCE__");
boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node,"__DIE_ON_ERROR__"));
String isUpdate = ElementParameterParser.getValue(node,"__ISUPDATE__");
List<Map<String,String>> keysReturn = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__RETURN_IDS__");

boolean addTaskID = ("true").equals(ElementParameterParser.getValue(node,"__ADD_TASKID__"));
boolean isCustom = "true".equals(ElementParameterParser.getValue(node, "__CUSTOM__"));
String taskID = ElementParameterParser.getValue(node,"__TASKID__");
String prevColumn = ElementParameterParser.getValue(node, "__PREV_COLUMN_TASK_ID__");

boolean usePartialUpdate = ("true").equals(ElementParameterParser.getValue(node,"__USE_PARTIAL_UPDATE__"));
boolean usePartialDelete = ("true").equals(ElementParameterParser.getValue(node,"__PARTIAL_DELETE__"));
String pivot = ElementParameterParser.getValue(node,"__PIVOT__");
boolean overwrite = ("true").equals(ElementParameterParser.getValue(node,"__OVERWRITE__"));
String key = ElementParameterParser.getValue(node,"__KEY__");
String position = ElementParameterParser.getValue(node,"__POSITION__");
String dataModel = ElementParameterParser.getValue(node, "__DATAMODEL__");
String dataCluster = ElementParameterParser.getValue(node, "__DATACLUSTER__");

boolean storeFlow = ("true").equals(ElementParameterParser.getValue(node, "__STORE_FLOW__"));

List<IMetadataTable> metadatas = node.getMetadataList();

if (destination != null && !"".equals(destination)) {
  cid = destination;
}

if (metadatas != null && metadatas.size()>0) { 
  IMetadataTable metadata = metadatas.get(0);
  if (metadata != null) { 
  
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    List<IMetadataColumn> rejectColumnList = null;
    boolean xmlFieldDocType=false;
    if (rejectConns != null && rejectConns.size() > 0) {
      IConnection rejectConn = rejectConns.get(0);
      if(rejectConn!=null){
      	rejectConnName = rejectConn.getName();
      	IMetadataTable metadataTable = rejectConn.getMetadataTable();
      	if(metadataTable!=null){
      		rejectColumnList = metadataTable.getListColumns();
      	}
      }
    }
   


    String outConnName = null;
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    List<IMetadataColumn> outputColumnList = null;

    for(IConnection tmpconn : outgoingConns) {
      if (tmpconn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        if(rejectConnName==null || !rejectConnName.equals(tmpconn.getName())){
          outConnName=tmpconn.getName();
	  IMetadataTable outputMetadata = tmpconn.getMetadataTable();
	  if(outputMetadata!=null){
	      outputColumnList = outputMetadata.getListColumns();
	  }
	}
      %>
        <%=tmpconn.getName() %> = null;
      <%
      }
    }

    if (outConnName != null) {
    %>
      <%=outConnName %> = new <%=outConnName %>Struct();
  	<%
  		if(outputColumnList!=null){
  			for(IMetadataColumn column:outputColumnList) {
  				if(column.getLabel().equals(xmlField) && "id_Document".equals(column.getTalendType())) {
  					xmlFieldDocType=true;
  					break;
  				}
  			}
  		}
      	if(xmlFieldDocType) {
		%>
			<%=outConnName %>.<%=xmlField %> = ParserUtils.parseTo_Document(queue_<%=cid %>.peek());
		<%
		}else{
		%>
			<%=outConnName %>.<%=xmlField %> = queue_<%=cid %>.peek();
		<%
		}
		 if(storeFlow){%>
      		java.util.Map<String,String> xmlFlow_<%=cid%> = xmlFlowList_<%=cid%>.get(flowNum_<%=cid%>);
      		String valueStr_<%=cid%>;
			<%
			if(outputColumnList!=null){
				for( int i = 0; i < outputColumnList.size(); i++) {
					IMetadataColumn column = outputColumnList.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(xmlField.equals(column.getLabel())){
						continue;
					}
				%>
	 			valueStr_<%=cid%> = xmlFlow_<%=cid%>.get("<%=column.getLabel()%>");
	  			if (valueStr_<%=cid%> != null){
					<%
					if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { // String or Object
					%>
						<%=outConnName%>.<%=column.getLabel()%> = valueStr_<%=cid%>;
					<%
					} else if(javaType == JavaTypesManager.DATE) { // Date
					%>
						<%=outConnName%>.<%=column.getLabel()%> = ParserUtils.parseTo_Date(valueStr_<%=cid%>, <%= patternValue %>);
					<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { // byte[]
					%>
						<%=outConnName%>.<%=column.getLabel()%> = valueStr_<%=cid%>.getBytes();
					<%
					} else  { // other
					%>						
						<%=outConnName%>.<%=column.getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(valueStr_<%=cid%>);
					<%
					}
					%>			
				} else {
					<%=outConnName%>.<%=column.getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
				}
	      		<%}
	      	}
      }%>
    <%}%>
    input_<%=cid %> = queue_<%=cid %>.peek();

    try {
		<%if(usePartialUpdate){ // partial%>
<%
			String dataclusterString = "";
    		if(isStaging){
    			dataclusterString = dataCluster + " + \"#STAGING\"";
    		} else {
    			dataclusterString = dataCluster;
    		}
%>
            Integer pos = null;
            if(!<%=usePartialDelete %>) {
                pos = <%=position.equals("")?null:position%>;
            }                        
            
			org.talend.mdm.webservice.WSPartialPutItem wsPartialPutItem_<%=cid%> = new org.talend.mdm.webservice.WSPartialPutItem(<%=dataclusterString %>,<%=dataModel %>,<%=usePartialDelete %>, <%=key.equals("")?null:key%>, <%=overwrite%>, <%=pivot%>,<%= true==isStaging?false:withReport%>, <%=sourceName%>,pos, input_<%=cid %>);
			wspk_<%=cid %> = service_<%=cid %>.partialPutItem(wsPartialPutItem_<%=cid%>);
			
            <% logUtil.debug("\"Partial put item successfully.\"");%>
			
            <%
	        if (outConnName !=null && !isMassInsert && keysReturn.size() > 0) {
	        	for (int i = 0; i < keysReturn.size(); i++){
	            	Map<String,String> map = keysReturn.get(i);
	              	%>
	              	<%=outConnName %>.<%=map.get("OUTPUT_COLUMN")%>= wspk_<%=cid%>.getIds().get(<%=i %>);
	            <%
	            }
	       	}
		   	%>     
            
		<%}else{// not partial %>   			
			
			org.talend.mdm.webservice.WSPutItem item_<%=cid %> = new org.talend.mdm.webservice.WSPutItem(<%=isUpdate %>, dataCluster_<%=cid %>,dataModel_<%=cid %>,input_<%=cid %>);
	      	<%
		    if (!isStaging && withReport) {%>
		        
		        <% logUtil.debug("\"Put item to MDM server with full update.\"");%>
		        
	        	org.talend.mdm.webservice.WSPutItemWithReport itemReport_<%=cid %> = new org.talend.mdm.webservice.WSPutItemWithReport(<%=needCheck %>, <%=sourceName %>, item_<%=cid %>);
		
		        <%if (isMassInsert) {%>
		        	<%if(addTaskID){%>
		        		taskIDs_<%=cid%>.add(<%=isCustom?taskID:"xmlFlowList_" + cid + ".get(flowNum_" + cid + ").get(\"" + prevColumn + "\")"%>);
		        	<%}%>
		          miList_<%=cid %>.add(itemReport_<%=cid %>);
		
		          if (miList_<%=cid %>.size() >= <%=numMassInsert %>) {		          		          
		          
		            org.talend.mdm.webservice.WSPutItemWithReportArray putItemWithReportArray = new org.talend.mdm.webservice.WSPutItemWithReportArray(miList_<%=cid %>);
		            wspks_<%=cid %> = service_<%=cid %>.putItemWithReportArray(putItemWithReportArray).getWsItemPK();
		            
		          <% logUtil.debug("\"Put item with report array successfully.\"");%>
		            
		            miList_<%=cid %>.clear();
		            <%if(addTaskID){%>		            			            	
		            	
		            	int i2_<%=cid %> = 0;
						for(org.talend.mdm.webservice.WSItemPK wspk2_<%=cid %> : wspks_<%=cid %>){
						
						    String compositeId = "";
						    for(String id:wspk2_<%=cid %>.getIds()) {
						          compositeId += id;
						    }						    
						      
							wspk2_<%=cid %>.setWsDataClusterPK(dataCluster_<%=cid %>);
							service_<%=cid %>.updateItemMetadata(util_<%=cid%>.makeUpdateMeteItm(taskIDs_<%=cid%>.get(i2_<%=cid %>), wspk2_<%=cid %>));
							i2_<%=cid %>++;
						}
		            	
		            	<% logUtil.debug("\"Add task id successfully.\"");%>
		            	taskIDs_<%=cid%>.clear();
		            <%}%>
		          }
		        <%} else {%>		          
		        
		          wspk_<%=cid %> = service_<%=cid %>.putItemWithReport(itemReport_<%=cid %>);
		          
		          <% logUtil.debug("\"Put item with report array successfully.\"");%>
		          
		          	<%if(addTaskID){%>		          	   
		            	service_<%=cid %>.updateItemMetadata(util_<%=cid%>. makeUpdateMeteItm(<%=isCustom?taskID:"xmlFlowList_" + cid + ".get(flowNum_" + cid + ").get(\"" + prevColumn + "\")"%>,wspk_<%=cid %>));
		            	<% logUtil.debug("\"Add task id successfully.\"");%>
		            <%}%>
		        <%
		        }
		
		        if (outConnName !=null && !isMassInsert && keysReturn.size() > 0) {
		        
		          for (int i = 0; i < keysReturn.size(); i++){
		            Map<String,String> map = keysReturn.get(i);
		            %>
		            <%=outConnName %>.<%=map.get("OUTPUT_COLUMN")%>= wspk_<%=cid%>.getIds().get(<%=i %>);
		          <%
		          }
		        }
		      } else {
		          %>
		          
		          <% logUtil.debug("\"Put item with to MDM server.\"");%>
		          
		          <%
		        if (isMassInsert) {
		        	if(addTaskID){%>
		        		taskIDs_<%=cid%>.add(<%=isCustom?taskID:"xmlFlowList_" + cid + ".get(flowNum_" + cid + ").get(\"" + prevColumn + "\")"%>);
		        	<%}%>
		          miList_<%=cid %>.add(item_<%=cid %>);
		
		          if (miList_<%=cid %>.size() >= <%=numMassInsert %>) {		          		              
		              
		              org.talend.mdm.webservice.WSPutItemArray putItemArray = new org.talend.mdm.webservice.WSPutItemArray(miList_<%=cid %>);
		              wspks_<%=cid %> = service_<%=cid %>.putItemArray(putItemArray).getWsItemPK();
		              
		              <% logUtil.debug("\"Put item array successfully.\"");%>
		              
		              miList_<%=cid %>.clear();
		            <%if(addTaskID){%>		            			            	
                        
		            	int i2_<%=cid %> = 0;
						for(org.talend.mdm.webservice.WSItemPK wspk2_<%=cid %> : wspks_<%=cid %>){
						
						    String compositeId = "";
						    for(String id:wspk2_<%=cid %>.getIds()) {
						          compositeId += id;
						    }						    
                
							wspk2_<%=cid %>.setWsDataClusterPK(dataCluster_<%=cid %>);
							service_<%=cid %>.updateItemMetadata(util_<%=cid%>.makeUpdateMeteItm(taskIDs_<%=cid%>.get(i2_<%=cid %>), wspk2_<%=cid %>));
							i2_<%=cid %>++;
						}
		            	
                        <% logUtil.debug("\"Add task id successfully.\"");%>
		            	taskIDs_<%=cid%>.clear();
		            <%}%>
		          }
		        <%
		        } else {%>		        		          
		          
		          wspk_<%=cid %> = service_<%=cid %>.putItem(item_<%=cid %>);
		          
		          <% logUtil.debug("\"Put item successfully.\"");%>
		          
					<%if(addTaskID){%>					   
		            	service_<%=cid %>.updateItemMetadata(util_<%=cid%>. makeUpdateMeteItm(<%=isCustom?taskID:"xmlFlowList_" + cid + ".get(flowNum_" + cid + ").get(\"" + prevColumn + "\")"%>,wspk_<%=cid %>));
		            	<% logUtil.debug("\"Add task id successfully.\"");%>
		            <%}%>
		          <%
		          if (outConnName !=null && !isMassInsert && keysReturn.size() > 0) {
		            for (int i = 0; i < keysReturn.size(); i++){
		              Map<String,String> map = keysReturn.get(i);
		              %>
		              <%=outConnName %>.<%=map.get("OUTPUT_COLUMN")%>= wspk_<%=cid%>.getIds().get(<%=i %>);
		            <%
		            }
		          }
		        }
		      }
		      %>
	    <%}//end partial%>  
    } catch (java.lang.Exception e) {
    <% logUtil.error("\"Unexpected error:\"+e.getMessage()");%>
      <%if (dieOnError) {%>        
        throw(e);
      <%} else {

        if (rejectConnName != null) {
          if (outConnName != null) {%>
            <%=outConnName %> = null;
          <%}%>
          <%=rejectConnName %> = new <%=rejectConnName %>Struct();
          
          <%if(storeFlow){%>
      		java.util.Map<String,String> rejectXmlFlow_<%=cid%> = xmlFlowList_<%=cid%>.get(flowNum_<%=cid%>);
      		String rejectValueStr_<%=cid%>;
			<%
			if(rejectColumnList!=null){
				for( int i = 0; i < rejectColumnList.size(); i++) {
					IMetadataColumn column = rejectColumnList.get(i);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(xmlField.equals(column.getLabel())){
						continue;
					}
				%>
	 			rejectValueStr_<%=cid%> = rejectXmlFlow_<%=cid%>.get("<%=column.getLabel()%>");
	  			if (rejectValueStr_<%=cid%> != null){
					<%
					if (javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) { // String or Object
					%>
						<%=rejectConnName%>.<%=column.getLabel()%> = rejectValueStr_<%=cid%>;
					<%
					} else if(javaType == JavaTypesManager.DATE) { // Date
					%>
						<%=rejectConnName%>.<%=column.getLabel()%> = ParserUtils.parseTo_Date(rejectValueStr_<%=cid%>, <%= patternValue %>);
					<%
					} else if(javaType == JavaTypesManager.BYTE_ARRAY) { // byte[]
					%>
						<%=rejectConnName%>.<%=column.getLabel()%> = rejectValueStr_<%=cid%>.getBytes();
					<%
					} else  { // other
					%>						
						<%=rejectConnName%>.<%=column.getLabel()%> = ParserUtils.parseTo_<%= typeToGenerate %>(rejectValueStr_<%=cid%>);
					<%
					}
					%>			
				} else {
					<%=rejectConnName%>.<%=column.getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
				}
	      		<%}
	      	}
      	  }
      	  if(xmlFieldDocType) {
		  %>
			<%=rejectConnName %>.<%=xmlField %> = ParserUtils.parseTo_Document(queue_<%=cid %>.peek());
		  <%
		  }else{
		  %>
			<%=rejectConnName %>.<%=xmlField %> = queue_<%=cid %>.peek();
		  <%
		  }
		  %>
		  nb_line_rejected_<%=cid%>++; 
          <%=rejectConnName %>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
        <%} else {%>
          System.err.println(e.getMessage());
        <%}
      }%>
    }
    <%if(storeFlow){%>
    flowNum_<%=cid%>++;
    <%}%>
    nb_line_<%=cid %>++;
  <%
  }
}%>
queue_<%=cid %>.remove();
